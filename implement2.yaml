AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Weather Forecast Application.

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 1.

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Public Subnet 2.

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Private Subnet 1.

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for Private Subnet 2.

  KeyPair:
    Type: String
    Default: capstone
    Description: EC2 Key Pair for SSH access.

  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type.

  DBUsername:
    Type: String
    Default: admin
    NoEcho: true
    Description: PostgreSQL database username.

  DBPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL database password.

Resources:
  WeatherVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WeatherVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WeatherVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WeatherVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WeatherVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WeatherVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  WeatherSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP, and Postgres access.
      VpcId: !Ref WeatherVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  WeatherInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      ImageId: ami-0e731c8a588258d0d # Amazon Linux 2 AMI (Update if needed)
      SecurityGroupIds:
        - !Ref WeatherSecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y python3 python3-pip git
        amazon-linux-extras enable postgresql14
        yum install -y postgresql
        cd /home/ec2-user
        git clone https://github.com/sandeepdulam19/CAPSTONE
        cd weather-forecast
        pip3 install -r requirements.txt
        python3 manage.py migrate
        python3 manage.py runserver 0.0.0.0:80
      Tags:
        - Key: Name
          Value: WeatherEC2Instance

  WeatherRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBName: weatherdb
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref WeatherSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # ✅ Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WeatherIGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WeatherVPC  # Reference your existing VPC
      InternetGatewayId: !Ref InternetGateway

  # ✅ Public Route Table for Internet Access
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WeatherVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # ✅ Associate Public Route Table with Public Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1  # Reference your public subnet
      RouteTableId: !Ref PublicRouteTable

  # ✅ NAT Gateway (For Private Subnets)
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1  # NAT must be in a Public Subnet
      Tags:
        - Key: Name
          Value: WeatherNATGateway

  # ✅ Private Route Table for Instances that Need Internet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WeatherVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  # ✅ Associate Private Route Table with Private Subnet (If Needed)
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1  # Reference your private subnet
      RouteTableId: !Ref PrivateRouteTable

